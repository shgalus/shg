/* mainpage.doc: doxygen documentation index page */

/**

\mainpage SHG Documentation

\tableofcontents

\section additional_documentation Additional documentation.

Additional documentation is in <a href = "shg.pdf">shg.pdf</a>.

\section directory_structure Directory structure.
\verbatim
.
|-- tools            auxiliary files
|   |-- scripts      various scripts
|-- doc              documentation files
|-- examples         example programs
|-- include
|   `-- shg          SHG include files
|-- src              SHG source files
`-- testing          source files for testing
\endverbatim

\section general_todos General todos.

\section strdlr NIST Statistical Reference Datasets Linear Regression.

Test cases in the file ols_test.cc use data for testing linear
regression retrieved on 24 December 2010 from <a href =
"http://www.itl.nist.gov/div898/strd/">NIST Statistical Reference
Datasets</a>. The data contain 11 datasets, described at <a href =
"http://www.itl.nist.gov/div898/strd/lls/lls.shtml">StRD Linear Least
Squares Regression Datasets</a>:

Dataset|Model|Number of Parameters|Number of Observations
:------|:----|-------------------:|---------------------:
Norris   |y = B0 + B1*x + e                                |  2 | 36
Pontius  |y = B0 + B1*x + B2*(x**2)                        |  3 | 40
NoInt1   |y = B1*x + e                                     |  1 | 11
NoInt2   |y = B1*x + e                                     |  1 |  3
Filip    |y = B0 + B1*x + B2*(x**2) + ... + B10*(x**10) + e| 11 | 82
Longley  |y = B0 + B1*x1 + B2*x2 + B3*x3 + ... + B6*x6 + e |  7 | 16
Wampler1 |y = B0 + B1*x + B2*(x**2) + ... + B5*(x**5)      |  6 | 21
Wampler2 |y = B0 + B1*x + B2*(x**2) + ... + B5*(x**5)      |  6 | 21
Wampler3 |y = B0 + B1*x + B2*(x**2) + ... + B5*(x**5)      |  6 | 21
Wampler4 |y = B0 + B1*x + B2*(x**2) + ... + B5*(x**5)      |  6 | 21
Wampler5 |y = B0 + B1*x + B2*(x**2) + ... + B5*(x**5)      |  6 | 21

Local copies of retrieved data files:
<a href = "Norris.dat">Norris.dat</a>,
<a href = "Pontius.dat">Pontius.dat</a>,
<a href = "NoInt1.dat">NoInt1.dat</a>,
<a href = "NoInt2.dat">NoInt2.dat</a>,
<a href = "Filip.dat">Filip.dat</a>,
<a href = "Longley.dat">Longley.dat</a>,
<a href = "Wampler1.dat">Wampler1.dat</a>,
<a href = "Wampler2.dat">Wampler2.dat</a>,
<a href = "Wampler3.dat">Wampler3.dat</a>,
<a href = "Wampler4.dat">Wampler4.dat</a>,
<a href = "Wampler5.dat">Wampler5.dat</a>.

\section doxygen_boost_test Boost test in Doxygen.

According to https://stackoverflow.com/questions/38643584, the
following macros should be defined in Doxyfile to get clear Doxygen
output:

\verbatim
PREDEFINED             = "BOOST_AUTO_TEST_CASE(name)=void name()" \
                         "BOOST_AUTO_TEST_SUITE(name)=namespace BoostTest { class name {public:" \
                         "BOOST_FIXTURE_TEST_SUITE(name,data)=namespace BoostTest { class name {public:" \
                         "BOOST_AUTO_TEST_SUITE_END()=};}" \
                         "BOOST_CONCEPT_REQUIRES(req,type)=type " \
                         "BOOST_CONCEPT_ASSERT(req)= "
\endverbatim

I have modified `BOOST_AUTO_TEST_SUITE(name)` and
`BOOST_AUTO_TEST_SUITE_END()` to allow nesting test suites. At the
moment, `BOOST_FIXTURE_TEST_SUITE(name,data)`,
`BOOST_CONCEPT_REQUIRES(req,type)` and `BOOST_CONCEPT_ASSERT(req)` are
left untouched as I do not use them.

I have experimented with adding

\verbatim
"BOOST_DATA_TEST_CASE(name, ...)=void name(__VA_ARGS__)"
\endverbatim

to Doxyfile, but Doxygen seems not to recognize `__VA_ARGS__`.
The following

\verbatim
#define BOOST_DATA_TEST_CASE(name,...) void name(__VA_ARGS__)


BOOST_DATA_TEST_CASE(operator_test, Date_dataset())

BOOST_DATA_TEST_CASE(normal_integral_test, bdata::xrange(61), xr1)

BOOST_DATA_TEST_CASE(gammad_test, bdata::xrange(101) * bdata::xrange(100), xr1, xr2)

BOOST_DATA_TEST_CASE(betain_test, bdata::xrange(9) * bdata::xrange(10) * bdata::xrange(10), xr1, xr2, xr3)
\endverbatim

passed to the C preprocessor works excellent, producing

\verbatim
void operator_test(Date_dataset())

void normal_integral_test(bdata::xrange(61), xr1)

void gammad_test(bdata::xrange(101) * bdata::xrange(100), xr1, xr2)

void betain_test(bdata::xrange(9) * bdata::xrange(10) * bdata::xrange(10), xr1, xr2, xr3)
\endverbatim

\section MSVC MSVC environment.

[Visual C++ Documentation] (https://docs.microsoft.com/en-us/cpp/)

[Microsoft C++ Build Tools]
(https://visualstudio.microsoft.com/visual-cpp-build-tools/)

[C++ in Visual Studio]
(https://docs.microsoft.com/en-us/cpp/overview/visual-cpp-in-visual-studio?view=vs-2019)

[Walkthrough: Create and use your own Dynamic Link Library (C++)]
(https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=vs-2019)

[Walkthrough: Create and use a static library]
(https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=vs-2019)

\subsection creating_visual_studio_solutions Creating Visual Studio solutions.

Create project `shg` as a static library in solution vs2017. Add
another project named `testing` as console application. For properies
of both projects in all configurations and all platforms:
- in section C/C++ Language choose ISO C++17 and disable language
  extensions,
- in section C/C++ Precompiled Headers choose Not Using Precompiled
  Headers,
- in section C/C++ Advanced disable warnings: 4996, 26451, 26812.

Remove generated files `framework.h`, `pch.h`, `shg.cpp`, `pch.cpp`.
Add header files from `include/shg` to both projects. Add files from
`src` to project `shg`. Add files from directory `testing` to project
`testing`. Do not add Makefiles. In C/C++ General in Additional
Include Directories add the path `..\..\..\include`.

Using NuGet package manager add for both porjects the following
libraries:

-# for VS 2017:
     - `boost`,
     - `boost_unit_test_framework-vc141`,
     - `gsl-msvc-x64`,
     - `gsl-msvc-x86`,
-# for VS 2019:
     - `boost`,
     - `boost_unit_test_framework-vc142`,
     - `gsl-msvc14-x64`,
     - `gsl-msvc14-x86`

\subsection nuget_configuration NuGet configuration.

The file `NuGet.Config`:


-# [Setup NuGet packages folder for project outside solution folder]
   (https://stackoverflow.com/questions/40322066)

-# [Common NuGet configurations]
   (https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior)

-# [nuget.config reference]
   (https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file)

\verbatim
~/projects
  shg
    vs
      vs2017
        NuGet.Config
\endverbatim

\section cocoalib_install Installing CoCoALib.

Download CoCoALib-0.99712.tgz from http://cocoa.dima.unige.it/cocoalib/.

    ./configure --with-boost=/usr/local/boost_1_75_0/include
    make
    make install
    Installed CoCoA examples in "/usr/local/include/CoCoA/examples/"
    Installed CoCoA documentation in "/usr/local/include/CoCoA/doc/"
    Installed CoCoA headers in "/usr/local/include/CoCoA/"
    Installed CoCoA library in "/usr/local/lib/"
    cd src/CoCoA-5
    make install
    CoCoA-5 installed in /usr/local/bin

Headers: file:////usr/local/include/CoCoA/, library:
file:////usr/local/lib/. Links:
[examples](file:////usr/local/include/CoCoA/examples/),
[CoCoALib-0.99712
documentation](file:///usr/local/include/CoCoA/doc/CoCoALib.pdf),
[CoCoALib-0.99712
documentation](file:///usr/local/include/CoCoA/doc/html/index.html)

\section installing_old_cvs_repository Installing old CVS repository.

To install old CVS repository, change to directory `doc` and say `make
cvs`. Then change to `cvs/shg` or `cvs/metashg` and issue issue normal
cvs commands like `cvs log`.

*/
