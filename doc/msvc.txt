In "Create a new project" select C++, Windows, Library, Dynamic-Link Library (DLL) and click Next. In Project name enter shg, select "C:\Users\shgal\projects" as location, enter shg as solution name, uncheck Place solution in the same directory, click Create.

Add to the project mathlibrary.h and replace its contets with
// MathLibrary.h - Contains declarations of math functions
#pragma once

#ifdef MATHLIBRARY_EXPORTS
#define MATHLIBRARY_API __declspec(dllexport)
#else
#define MATHLIBRARY_API __declspec(dllimport)
#endif

// The Fibonacci recurrence relation describes a sequence F
// where F(n) is { n = 0, a
//               { n = 1, b
//               { n > 1, F(n-2) + F(n-1)
// for some initial integral values a and b.
// If the sequence is initialized F(0) = 1, F(1) = 1,
// then this relation produces the well-known Fibonacci
// sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

// Initialize a Fibonacci relation sequence
// such that F(0) = a, F(1) = b.
// This function must be called before any other function.
extern "C" MATHLIBRARY_API void fibonacci_init(
    const unsigned long long a, const unsigned long long b);

// Produce the next value in the sequence.
// Returns true on success and updates current value and index;
// false on overflow, leaves current value and index unchanged.
extern "C" MATHLIBRARY_API bool fibonacci_next();

// Get the current value in the sequence.
extern "C" MATHLIBRARY_API unsigned long long fibonacci_current();

// Get the position of the current value in the sequence.
extern "C" MATHLIBRARY_API unsigned fibonacci_index();

Add to the project mathlibrary.cc and replace its contents with:
// MathLibrary.cpp : Defines the exported functions for the DLL.
#include "pch.h" // use stdafx.h in Visual Studio 2017 and earlier
#include <utility>
#include <limits.h>
#include "MathLibrary.h"

// DLL internal state variables:
static unsigned long long previous_;  // Previous value, if any
static unsigned long long current_;   // Current sequence value
static unsigned index_;               // Current seq. position

// Initialize a Fibonacci relation sequence
// such that F(0) = a, F(1) = b.
// This function must be called before any other function.
void fibonacci_init(
    const unsigned long long a,
    const unsigned long long b)
{
    index_ = 0;
    current_ = a;
    previous_ = b; // see special case when initialized
}

// Produce the next value in the sequence.
// Returns true on success, false on overflow.
bool fibonacci_next()
{
    // check to see if we'd overflow result or position
    if ((ULLONG_MAX - previous_ < current_) ||
        (UINT_MAX == index_))
    {
        return false;
    }

    // Special case when index == 0, just return b value
    if (index_ > 0)
    {
        // otherwise, calculate next sequence value
        previous_ += current_;
    }
    std::swap(current_, previous_);
    ++index_;
    return true;
}

// Get the current value in the sequence.
unsigned long long fibonacci_current()
{
    return current_;
}

// Get the current index position in the sequence.
unsigned fibonacci_index()
{
    return index_;
}

Choose Build -> Build solution. The output should be:

1>------ Build started: Project: shg, Configuration: Debug Win32 ------
1>pch.cpp
1>dllmain.cpp
1>mathlibrary.cc
1>C:\Users\shgal\projects\shg\shg\mathlibrary.cc(18,1): warning C4273: 'fibonacci_init': inconsistent dll linkage
1>C:\Users\shgal\projects\shg\shg\MathLibrary.h(22,33): message : see previous definition of 'fibonacci_init'
1>C:\Users\shgal\projects\shg\shg\mathlibrary.cc(27,1): warning C4273: 'fibonacci_next': inconsistent dll linkage
1>C:\Users\shgal\projects\shg\shg\MathLibrary.h(28,33): message : see previous definition of 'fibonacci_next'
1>C:\Users\shgal\projects\shg\shg\mathlibrary.cc(48,1): warning C4273: 'fibonacci_current': inconsistent dll linkage
1>C:\Users\shgal\projects\shg\shg\MathLibrary.h(31,47): message : see previous definition of 'fibonacci_current'
1>C:\Users\shgal\projects\shg\shg\mathlibrary.cc(54,1): warning C4273: 'fibonacci_index': inconsistent dll linkage
1>C:\Users\shgal\projects\shg\shg\MathLibrary.h(34,37): message : see previous definition of 'fibonacci_index'
1>Generating Code...
1>   Creating library C:\Users\shgal\projects\shg\Debug\shg.lib and object C:\Users\shgal\projects\shg\Debug\shg.exp
1>shg.vcxproj -> C:\Users\shgal\projects\shg\Debug\shg.dll
1>Done building project "shg.vcxproj".
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========

Choose File -> New -> Project, select C++, Windows, Library, Console, Console App and click Next.

In Project name enter testing, and Add to solution at location "C:\Users\shgal\projects\shg", click Create.

Adding the DLL header to include path:
Right-click testing in solution explorer. In testing Property Pages, for all configurations, in Configuration Properties | C/C++ | General add in Additional Include Directories ..\shg

Replace the contents of testing.cpp with;

// MathClient.cpp : Client app for MathLibrary DLL.
// #include "pch.h" Uncomment for Visual Studio 2017 and earlier
#include <iostream>
#include "MathLibrary.h"

int main()
{
    // Initialize a Fibonacci relation sequence.
    fibonacci_init(1, 1);
    // Write out the sequence values until overflow.
    do {
        std::cout << fibonacci_index() << ": "
            << fibonacci_current() << std::endl;
    } while (fibonacci_next());
    // Report count of values written before overflow.
    std::cout << fibonacci_index() + 1 <<
        " Fibonacci sequence values fit in an " <<
        "unsigned 64-bit integer." << std::endl;
}

Try Build -> Compile. There should be no errors.

add the DLL import library to your project

Right-click on the testing node in colution explorer and choose Properties. Select All Configurations. In the Cofiguration Properties | Linker | Input | Additional Dependencies insert shg.lib.

Right-click on the testing node in colution explorer and choose Properties. Select All Configurations. In the Cofiguration Properties | Linker | General | Additional Library Directories insert ..\$(IntDir). The project testing should now compile and link succesfuly.

copy the DLL in a post-build event

Right-click on the testing node in colution explorer and choose Properties. Select All Configurations. In the Cofiguration Properties | Build Events | Post-Build Event | command line insert

xcopy /y /d "..\$(IntDir)shg.dll" "$(OutDir)"

Right-click on testing  node in solution explorer and click Set as startup project. Now build and run.

Right click on Solution 'shg' in Solution Explorer and select Project Build Order. Fill there that testing depends on shg. We may now clean, rebuild and run testing.

At the status bar click Add to Source control and close Visual studio.

Sources:

https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=vs-2019

https://docs.microsoft.com/en-us/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=vs-2019

https://inthetechpit.com/2019/07/09/set-project-build-order-in-visual-studio/

https://docs.microsoft.com/en-us/cpp/build/dlls-in-visual-cpp?view=vs-2019

Czy na pewno to xcopy jest potrzebne? Przecież to wszystko idzie do tego samego katalogu w solution/Debug.

Disable Precompiled Headers

    Open your project, then select “Project” > “appname Properties…“.
    Expand “Configuration Properties” > “C/C++” > “Precompiled Headers“.
    Set “Precompiled Header” to “Not Using Precompiled Headers“.


For Windows, I recommend that you first install Visual Studio 2019. Make sure that you install the proper Visual Studio and not Visual Studio Code which is an entirely different product. Once the Visual Studio installer starts, check the Desktop development with C++ workload

Next, install git for Windows from https://git-scm.com/. If you are not familiar with git, just accept the defaults suggested by the installer.

Finally, we are going to install vcpkg which is a C++ library manager that will let us install GSL. I will install vcpkg in a folder on my C drive, feel free to install it in a different location, just avoid paths with empty spaces. Open a PowerShell window (PowerShell is already installed on Windows, you can find it in the Start menu):

1 cd C:\
2 mkdir DEV
3 cd DEV

Next, we are going to use git to get the latest vcpkg version:

1 git clone https://github.com/microsoft/vcpkg.git

After the above command finishes, go to the vcpkg folder, bootstrap and integrate vcpkg:

1 cd vcpkg
2 .\bootstrap-vcpkg.bat
3 .\vcpkg integrate install

At this point, you can use the vcpkg command to install any of the available C++ libraries. You can find the complete list of available libraries in the ports folder from the vcpkg installation. Once you use vcpkg to install a library, it will be available in your Visual Studio C++ projects.

Let’s install GSL with vcpkg:

1 .\vcpkg install gsl gsl:x64-windows

The above command will build and install GSL for 32 and 64 bits Visual Studio projects.

Next time when you want to install a C++ library that is available in the vcpkg ports, remember to open a PowerShell window and navigate to the where you’ve installed vcpkg. vcpkg is not added to the system path, so you need to be in the vcpkg folder in order to be able to use it.

As a side note, a library installed with vcpkg is directly available in your msbuild projects (the ones created by default by Visual Studio). If you want to create a CMake project, you will need to add the include folders and libraries to the CMake project.

Now, that you have GSL installed, start Visual Studio and create a new C++ console project. You can remove the hello world C++ code that is generated by the compiler and write your C++ GSL program, see the GSL usage part of the article for an example.

https://docs.microsoft.com/en-us/cpp/build/vcpkg?view=vs-2019
