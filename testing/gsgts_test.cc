#include "shg/gsgts.h"
#include "shg/mzt.h"
#include "shg/utils.h"
#include "testing.h"

namespace SHG::Testing {

BOOST_AUTO_TEST_SUITE(gsgts_test)

BOOST_AUTO_TEST_CASE(basic_test) {
     const std::vector<double> result1{
          -0.1853455, -0.1532896, -0.1108232, -0.2036469, -0.1754326,
          -0.1098344, -0.1704000, -0.1704131, -0.1563406, -0.1918795,
          -0.0037222, 0.0975940,  0.0355298,  -0.0634263, 0.0374293,
          0.0977770,  0.0736954,  0.2835564,  0.2788326,  0.2212461,
          0.1910693,  0.1717203,  0.1263446,  0.0584663,  -0.1037948,
          -0.2123793, -0.3292821, -0.2957615, -0.0796072, -0.0078135,
          0.1049731,  -0.1195140, 0.0005337,  -0.0356647, 0.2934005,
          0.2276349,  0.4457550,  0.4160869,  0.4105583,  0.1995325,
          0.0474566,  0.1518003,  0.2249002,  0.1612962,  0.1916418,
          0.1283362,  0.0949260,  0.1025253,  0.1695968,  0.3228145,
          0.0881576,  0.2352667,  0.2379230,  0.0875150,  -0.1102473,
          -0.2148395, -0.0491461, -0.1555136, -0.0795668, 0.0525286,
          0.0295757,  0.2391820,  0.1089352,  0.2395681,  0.1216882,
          0.2793094,  0.3333728,  0.1691596,  -0.0416942, 0.1816499,
          0.4151612,  0.2889556,  0.2731870,  0.3562827,  0.1409797,
          0.1811236,  0.1518109,  0.0900939,  0.1209136,  0.0668564,
          0.1764099,  0.2728195,  0.2470544,  0.1540218,  0.0997584,
          0.1230065,  -0.0144507, 0.1192095,  0.1224003,  0.1762245,
          0.1806781,  0.1696920,  -0.0684979, -0.1765898, -0.1535255,
          -0.0453403, -0.0492510, 0.0043458,  0.0749827,  0.0774716,
          0.1105852,  0.1633152,  0.3711041,  0.3320104,  0.3874592,
          0.2527283,  0.0685019,  0.0296893,  -0.1128779, -0.1337343,
          -0.0479861, -0.0095436, -0.0649834, -0.0609462, -0.1011171,
          -0.1103539, -0.0297745, 0.0183672,  0.1219624,  0.3562367,
          0.4008174,  0.4294983,  0.2980393,  0.1350898,  -0.0283490,
          -0.0908774, -0.0056641, -0.0478976, 0.1339543};
     const std::vector<double> result2{
          -0.6316450, -0.5236583, -0.6450972, -0.6190345, -0.5010952,
          -0.9558759, -0.1537523, 0.4321690,  -0.2066403, 0.1795031,
          0.6131393,  1.3266019,  0.8642400,  0.7363808,  0.3988882,
          -0.6462101, -1.5355407, -1.0049679, 0.3972050,  -0.2645621,
          -0.3155533, 0.8387987,  1.5328002,  2.0032490,  0.8197588,
          0.0549526,  0.9641574,  0.4819636,  0.5519046,  0.0725050,
          1.2768633,  0.4071369,  1.3226040,  -0.3431683, -0.7920558,
          -0.6202403, -0.2992066, 0.3171086,  0.8226870,  0.5258867,
          1.0262011,  1.1781231,  -0.4041209, 1.4476297,  1.2358308,
          1.1499674,  0.5927083,  0.4290790,  0.2877266,  0.2509648,
          1.2343851,  0.6633968,  0.4232300,  -0.0151701, 0.4706398,
          0.6900624,  0.8829870,  -0.7137435, -0.7393445, -0.2582170,
          0.0220044,  0.3048083,  0.4480417,  1.4495389,  1.7003893,
          0.8326820,  -0.1140906, -0.6896338, -0.2440786, -0.1348664,
          -0.4987745, -0.4856796, -0.1759956, 0.7788311,  1.9449494,
          1.6053352,  0.3524270,  -0.6395870, -0.1899812, -0.0128994};
     const GSGTS::Cosine_transform ct{nullptr};
     const GSGTS::Real_transform rt{nullptr};
     const double eps = 5e-8;
     const std::vector<double> acf1 = acfar1(1.0 / 64.0, 0.8, 129);
     const std::vector<double> acf2 = acfar1(0.5, 0.6, 80);
     std::vector<double>::size_type i;
     MZT mzt;
     auto normal = [&mzt]() { return mzt.normal(); };
     std::vector<double> X;

     mzt = MZT();
     X.resize(acf1.size());
     GSGTS gsgts1(acf1, ct);
     gsgts1.generate(X, normal, rt);
     BOOST_CHECK(X.size() == acf1.size());
     BOOST_REQUIRE(X.size() == result1.size());
     for (i = 0; i < X.size(); i++)
          BOOST_CHECK(faeq(X[i], result1[i], eps));

     mzt = MZT();
     X.resize(acf2.size());
     GSGTS gsgts2(acf2, ct);
     gsgts2.generate(X, normal, rt);
     BOOST_CHECK(X.size() == acf2.size());
     BOOST_REQUIRE(X.size() == result2.size());
     for (i = 0; i < X.size(); i++)
          BOOST_CHECK(faeq(X[i], result2[i], eps));
}

BOOST_AUTO_TEST_SUITE_END()

}  // namespace SHG::Testing
